# name: release
# env:
#   DEBUG: napi:*
#   APP_NAME: source-code-diagnosis
#   MACOSX_DEPLOYMENT_TARGET: '10.13'
#   CARGO_INCREMENTAL: '1'
# permissions:
#   contents: write
#   id-token: write
# on:
#   release:
#     types: [prereleased]

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

# jobs:
#   build:
#     strategy:
#       fail-fast: false
#       matrix:
#         settings:

#           - host: macos-latest
#             target: x86_64-apple-darwin
#             build: pnpm build --target x86_64-apple-darwin
#           - host: macos-latest
#             target: aarch64-apple-darwin
#             build: pnpm build --target aarch64-apple-darwin


#           - host: windows-latest
#             build: pnpm build --target x86_64-pc-windows-msvc
#             target: x86_64-pc-windows-msvc
#           - host: windows-latest
#             build: pnpm build --target i686-pc-windows-msvc
#             target: i686-pc-windows-msvc
#           - host: windows-latest
#             target: aarch64-pc-windows-msvc
#             build: pnpm build --target aarch64-pc-windows-msvc


#           - host: ubuntu-latest
#             target: x86_64-unknown-linux-gnu
#             docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
#             build: pnpm build --target x86_64-unknown-linux-gnu
#           - host: ubuntu-latest
#             target: x86_64-unknown-linux-musl
#             docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
#             build: pnpm build --target x86_64-unknown-linux-musl
#           - host: ubuntu-latest
#             target: aarch64-unknown-linux-gnu
#             docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
#             build: |
#               set -e 
#               rustup target add aarch64-unknown-linux-gnu
#               pnpm build --target aarch64-unknown-linux-gnu
#           - host: ubuntu-latest
#             target: aarch64-unknown-linux-musl
#             docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine-zig
#             build: |-
#               set -e 
#               rustup target add aarch64-unknown-linux-musl &&
#               pnpm build --target aarch64-unknown-linux-musl
          
#     name: stable - ${{ matrix.settings.target }} - node@18
#     runs-on: ${{ matrix.settings.host }}
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup Pnpm
#         uses: pnpm/action-setup@v4
#         with:
#           run_install: false
#       - name: Setup node
#         uses: actions/setup-node@v4
#         if: ${{ !matrix.settings.docker }}
#         with:
#           node-version: 20
#           cache: pnpm
      
#       - name: Install rust toolchain
#         uses: dtolnay/rust-toolchain@nightly
#         if: ${{ !matrix.settings.docker }}
#         with:
#           targets: ${{ matrix.settings.target }}
#       - name: Cache cargo
#         uses: actions/cache@v4
#         with:
#           path: |
#             ~/.cargo/registry/index/
#             ~/.cargo/registry/cache/
#             ~/.cargo/git/db/
#             .cargo-cache
#             target/
#           key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
#       # - uses: goto-bus-stop/setup-zig@v2
#       #   if: ${{ contains(matrix.settings.target, 'musl') }}
#       #   with:
#       #     version: 0.13.0
#       - name: Setup toolchain
#         run: ${{ matrix.settings.setup }}
#         if: ${{ matrix.settings.setup }}
#         shell: bash
#       - name: Install dependencies
#         run: pnpm install
#       - name: Build in docker
#         uses: addnab/docker-run-action@v3
#         if: ${{ matrix.settings.docker }}
#         with:
#           image: ${{ matrix.settings.docker }}
#           options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
#           run: ${{ matrix.settings.build }}
#       - name: Build
#         run: ${{ matrix.settings.build }}
#         if: ${{ !matrix.settings.docker }}
#         shell: bash
#       - name: Upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: bindings-${{ matrix.settings.target }}
#           path: ${{ env.APP_NAME }}.*.node
#           if-no-files-found: error
#       - name: Upload js
#         uses: actions/upload-artifact@v4
#         if: ${{ matrix.settings.target == 'aarch64-apple-darwin' }}
#         with:
#           name: js
#           path: |
#             index.js
#             index.d.ts
#           overwrite: true
  
#   test-macOS-windows-binding:
#     name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
#     needs:
#       - build
#     strategy:
#       fail-fast: false
#       matrix:
#         settings:
#           - host: windows-latest
#             target: x86_64-pc-windows-msvc
#             architecture: x64
#           - host: macos-14
#             target: aarch64-apple-darwin
#             architecture: arm64
#           - host: macos-13
#             target: x86_64-apple-darwin
#             architecture: x64
#         node:
#           - '18'
#           - '20'
#     runs-on: ${{ matrix.settings.host }}
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup Pnpm
#         uses: pnpm/action-setup@v4
#         with:
#           run_install: false
#       - name: Setup node
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ matrix.node }}
#           cache: pnpm
#           architecture: ${{ matrix.settings.architecture }}
#       - name: Install dependencies
#         run: pnpm install --frozen-lockfile
#       - name: Download artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: bindings-${{ matrix.settings.target }}
#           path: .
#       - name: Download js
#         uses: actions/download-artifact@v4
#         with:
#           name: js
#           path: .
#       - name: List packages
#         run: ls -R .
#         shell: bash
#       - name: Test bindings
#         run: pnpm test
#   test-linux-x64-gnu-binding:
#     name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
#     needs:
#       - build
#     strategy:
#       fail-fast: false
#       matrix:
#         node:
#           - '18'
#           - '20'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#       - name: Download Artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: bindings-x86_64-unknown-linux-gnu
#           path: .
#       - name: Download Javascript Entry
#         uses: actions/download-artifact@v4
#         with:
#           name: js
#           path: .
#       - name: Debug List Packages
#         run: ls -R .
#         shell: bash
#       - name: Setup And Run Tests In Docker
#         uses: addnab/docker-run-action@v3
#         with:
#           image: node:${{ matrix.node }}-slim
#           options: '-v ${{ github.workspace }}:/build -w /build'
#           run: |
#             set -e
#             corepack enable
#             pnpm config set supportedArchitectures.cpu "x64"
#             pnpm config set supportedArchitectures.libc "glibc"
#             pnpm install --frozen-lockfile
#             pnpm test
#             ls -la

#   test-linux-x64-musl-binding:
#     name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
#     needs:
#       - build
#     strategy:
#       fail-fast: false
#       matrix:
#         node:
#           - '18'
#           - '20'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#       - name: Download Artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: bindings-x86_64-unknown-linux-musl
#           path: .
#       - name: Download Javascript Entry
#         uses: actions/download-artifact@v4
#         with:
#           name: js
#           path: .
#       - name: Debug List Packages
#         run: ls -R .
#         shell: bash
#       - name: Setup And Run Tests In Docker
#         uses: addnab/docker-run-action@v3
#         with:
#           image: node:${{ matrix.node }}-alpine
#           options: '-v ${{ github.workspace }}:/build -w /build'
#           run: |
#             set -e
#             corepack enable
#             pnpm config set supportedArchitectures.libc "musl"
#             pnpm install --frozen-lockfile
#             pnpm test

#   test-linux-aarch64-gnu-binding:
#     name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
#     needs:
#       - build
#     strategy:
#       fail-fast: false
#       matrix:
#         node:
#           - '18'
#           - '20'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#       - name: Download Artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: bindings-aarch64-unknown-linux-gnu
#           path: .
#       - name: Download Javascript Entry
#         uses: actions/download-artifact@v4
#         with:
#           name: js
#           path: .
#       - name: Debug List Packages
#         run: ls -R .
#         shell: bash
#       - name: Setup QEMU
#         uses: docker/setup-qemu-action@v3
#         with:
#           platforms: arm64
#       - name: Run QEMU
#         run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
#       - name: Setup And Run Tests In Docker
#         uses: addnab/docker-run-action@v3
#         with:
#           image: node:${{ matrix.node }}-slim
#           options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
#           run: |
#             set -e
#             corepack enable
#             pnpm config set supportedArchitectures.cpu "arm64"
#             pnpm config set supportedArchitectures.libc "glibc"
#             pnpm install --frozen-lockfile
#             pnpm test
#             ls -la
#   test-linux-aarch64-musl-binding:
#     name: Test bindings on aarch64-unknown-linux-musl - node@lts
#     needs:
#       - build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository 
#         uses: actions/checkout@v4
#       - name: Download Artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: bindings-aarch64-unknown-linux-musl
#           path: .
#       - name: Download Javascript Entry
#         uses: actions/download-artifact@v4
#         with:
#           name: js
#           path: .
#       - name: Debug List Packages
#         run: ls -R .
#         shell: bash
#       - name: Setup QEMU
#         uses: docker/setup-qemu-action@v3
#         with:
#           platforms: arm64
#       - name: Run QEMU
#         run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
#       - name: Setup And Run Tests In Docker
#         uses: addnab/docker-run-action@v3
#         with:
#           image: node:lts-alpine
#           options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
#           run: |
#             set -e
#             corepack enable
#             pnpm config set supportedArchitectures.cpu "arm64"
#             pnpm config set supportedArchitectures.libc "musl"
#             pnpm install --frozen-lockfile
#             pnpm test
   
            
#   publish:
#     name: Publish
#     runs-on: ubuntu-latest
#     needs:
#       - test-macOS-windows-binding
#       - test-linux-x64-gnu-binding
#       - test-linux-x64-musl-binding
#       - test-linux-aarch64-gnu-binding
#       - test-linux-aarch64-musl-binding
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Setup Pnpm
#         uses: pnpm/action-setup@v4
#         with:
#           run_install: false

#       - name: Setup node
#         uses: actions/setup-node@v4
#         with:
#           node-version-file: '.node-version'
#           cache: pnpm

#       - name: Install dependencies
#         run: pnpm install --frozen-lockfile --strict-peer-dependencies

#       - name: Build js
#         run: pnpm build:js

#       - name: Download all artifacts
#         uses: actions/download-artifact@v4
#         with:
#           path: artifacts

#       - name: Download js
#         uses: actions/download-artifact@v4
#         with:
#           name: js
#           path: .

#       - name: List packages
#         run: ls -R ./artifacts
#         shell: bash

#       - name: Move artifacts
#         run: npm run artifacts

#       - name: List packages
#         run: ls -R ./npm
#         shell: bash

#       - name: Publish
#         run: |
#           npm config set provenance true
#           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
#           if echo "$GITHUB_REF_NAME" | grep -q "^v[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
#             npm publish --access public 
#           elif echo "$GITHUB_REF_NAME" | grep -q "^v[0-9]\+\.[0-9]\+\.[0-9]\+"; then
#             npm publish --tag next --access public 
#           else
#             echo "Not a release, skipping publish"
#           fi
#         env:
#           GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#           NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
#           GITHUB_REF_NAME: ${{ github.ref_name }}


#   update-release:
#     name: Update release
#     runs-on: ubuntu-latest
#     needs:
#       - publish
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Update release
#         run: |
#           TAG=${{github.ref_name}}
#           echo "Update release $TAG"
#           gh release edit $TAG --draft=false --prerelease=false --latest=true
#         env:
#           GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}